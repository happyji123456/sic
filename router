Q1 P-6 Implementation of Classification algorithm in R Programming.
Q2 JUST AFRER P-6 .Practical Implementation of Decision Tree using R Tool

********Q3 P-7 K-means clustering using R(BY CGPT)*********

# Load necessary libraries
install.packages("ggplot2")   # Install ggplot2 if not installed
library(ggplot2)

# Generate sample dataset
set.seed(123)  # For reproducibility
data <- data.frame(
  x = c(rnorm(50, mean = 2, sd = 0.5), 
        rnorm(50, mean = 6, sd = 0.5), 
        rnorm(50, mean = 10, sd = 0.5)),
  y = c(rnorm(50, mean = 2, sd = 0.5), 
        rnorm(50, mean = 6, sd = 0.5), 
        rnorm(50, mean = 10, sd = 0.5))
)

# Perform K-Means Clustering
k <- 3  # Number of clusters
kmeans_result <- kmeans(data, centers = k, nstart = 25)

# Add cluster results to data
data$cluster <- as.factor(kmeans_result$cluster)

# Visualize the Clusters
ggplot(data, aes(x, y, color = cluster)) +
  geom_point(size = 3) +
  labs(title = "K-Means Clustering in R Studio") +
  theme_minimal()







*******P.5. if analysis************

HP         =1OO*50 =>ans(60)
LP       =1OO(Total no of books) -no of books =>ans(40)

LP          =1OO-60 =>Ans(40)

For total  =60*50+40*20

******P.6. Classification algorithm in R Programming******

# KNN Method

bankloan <- read.csv("~/Desktop/BI Prac/BANK LOAN.csv")

library(caret)
index <- createDataPartition(bankloan$DEFAULTER, p=0.8, list=FALSE)
View(bankloan)

bankloan2 <- subset(bankloan, select = c(-DEFAULTER))
bankloan3 <- scale(bankloan2)

traindata <- bankloan3[index,]
testdata <- bankloan2[-index,]

#create class vector
Ytrain <- bankloan$DEFAULTER[index]
Ytest <- bankloan$DEFAULTER[-index]

library(class)
model_knn <- knn(traindata, testdata, k=23, cl= Ytrain)
table(Ytest, model_knn)

specificity(as.factor(Ytest),as.factor(model_knn),cutoff = 0.5)         
sensitivity(as.factor(Ytest),as.factor(model_knn),cutoff = 0.5).


************Q.8.linear Regression*********

#LINEAR REGRESSION

library(ggplot2)
library (caret)
#load inbuilt data
data("mtcars")|
set.seed (89)
cor(mtcars) # co-relation matrix for the data
sample_index <- sample (1:nrow (mtcars), 0.8*nrow (mtcars))
train_data <- mtcars [sample_index, ]
test_data <- mtcars [-sample_index, ]
linearModel <- 1m(mpghp+drat + am, data train_data)
summary (linearModel)





#BY GRAPHALLY
Visualize the Regression Graphically
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name. png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression", abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file. dev.off()
